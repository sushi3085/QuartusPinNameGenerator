namespace QuartusPinNameGenerator {
	public partial class Form1 : Form {

		Button[] segSetBts;
		// 開一個 2D array，去存 segSet 視窗回 call 的資料
		string[][] segBtnData;
		string[][] segBtnVarName;

		public Form1() {
			InitializeComponent();
			segSetBts = new Button[] {
				segSetBtn6, segSetBtn5, segSetBtn4, segSetBtn3, segSetBtn2, segSetBtn1
			};
			segBtnData = new string[segSetBts.Length][];// size 8 at dimension 1
			for (int i = 0; i < segSetBts.Length; i++) segBtnData[i] = ["", "", "", "", "", "", "", ""];

			segBtnVarName = new string[segSetBts.Length][];
			segBtnVarName[0] = ["C14", "E15", "C15", "C16", "E16", "D17", "C17", "D15"];
			segBtnVarName[1] = ["C18", "D18", "E18", "B16", "A17", "A18", "B17", "A16"];
			segBtnVarName[2] = ["B20", "A20", "B19", "A21", "B21", "C22", "B22", "A19"];
			segBtnVarName[3] = ["F21", "E22", "E21", "C19", "C20", "D19", "E17", "D22"];
			segBtnVarName[4] = ["F18", "E20", "E19", "J18", "H19", "F19", "F20", "F17"];
			segBtnVarName[5] = ["J20", "K20", "L18", "N18", "M20", "N19", "N20", "L19"];

			// Binding description handler's textbox
			DescriptionHandler.setDescriptionTextBox(textBox1);
		}

		private void button2_Click(object sender, EventArgs e) {
			OpenFileDialog dialog = new OpenFileDialog();
			dialog.Filter = "CSV files (*.csv)|*.csv";
			dialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
			dialog.CheckFileExists = false;

			if (dialog.ShowDialog() != DialogResult.OK) return;
			if (dialog.FileName == "") {
				MessageBox.Show("請輸入合法檔名。", "操作失敗", MessageBoxButtons.OK, MessageBoxIcon.Error);
				return;
			}
			writeCSVFile(dialog.FileName);
		}

		private void writeCSVFile(string fName) {
			StreamWriter writer = new StreamWriter(fName);
			writer.WriteLine("# Generated by QuartusPinNameGenerator, by Cuesta 2024.");
			writer.WriteLine("To,Direction,Location,I/O Bank,VREF Group,Fitter Location,I/O Standard,Reserved,Current Strength,Slew Rate,Differential Pair,Strict Preservation");
			// TODO: write the data
			// switches
			string[] swcPins = { "F15", "B14", "A14", "A13", "B12", "A12", "C12", "D12", "C11", "C10" };
			TextBox[] swcTexts = { textBox4, textBox5, textBox6, textBox7, textBox8, textBox9, textBox10, textBox11, textBox12, textBox13 };
			for (int i = 0; i < 10; i++) {
				if (swcTexts[i].Text == "") continue;
				writer.WriteLine($"{swcTexts[i].Text},OUTPUT,PIN_{swcPins[i]},,,,,,,,,");
			}

			// buttons
			if (textBox2.Text != "")
				writer.WriteLine($"{textBox2.Text},OUTPUT,PIN_B8,,,,,,,,,");
			if (textBox3.Text != "")
				writer.WriteLine($"{textBox3.Text},OUTPUT,PIN_A7,,,,,,,,,");

			// LEDs
			string[] ledPins = { "B11", "A11", "D14", "E14", "C13", "D13", "B10", "A10", "A9", "A8" };
			TextBox[] ledTexts = { textBox14, textBox15, textBox16, textBox17, textBox18, textBox19, textBox20, textBox21, textBox22, textBox23 };
			for (int i = 0; i < 10; i++) {
				if (ledTexts[i].Text == "") continue;
				writer.WriteLine($"{ledTexts[i].Text},OUTPUT,PIN_{ledPins[i]},,,,,,,,,");
			}

			// 7 segment displayer
			for (int i = 0; i < segBtnData.Length; i++) {
				for (int j = 0; j < 8; j++) {
					if (segBtnData[i][j] == "") continue;
					writer.WriteLine($"{segBtnData[i][j]},OUTPUT,PIN_{segBtnVarName[i][j]},,,,,,,,,");
				}
			}

			writer.Flush();
			writer.Close();
			MessageBox.Show("恭喜擊破車窗，祝後續實驗進行順利。", "操作成功", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
		}

		private void startupSegWindow(object sender, EventArgs e) {
			//if(existedSegForm != null) {
			//	existedSegForm.BringToFront();
			//	MessageBox.Show("不過我幫你找到了，在這裡：", "哎呀，你先前有開過其他的視窗喔！");
			//	return;
			//}
			if (!(sender is Button)) throw new ArgumentException("sender is not a Button");
			Button btn = (Button)sender;
			for (int i = 0; i < segSetBts.Length; i++) {
				if (segSetBts[i] == btn) {
					// pass in corresponding data to initialize the seg form
					new SegForm("七段顯示器 #" + i, ref segBtnData[i], segSetBts[i]).ShowDialog();
					// don't forget the pre-stored data
				}
			}
		}

		private void ledClearButton_Click(object sender, EventArgs e) {
			TextBox[] ledTexts = { textBox14, textBox15, textBox16, textBox17, textBox18, textBox19, textBox20, textBox21, textBox22, textBox23 };
			for (int i = 0; i < ledTexts.Length; i++) {
				ledTexts[i].Text = "";
			}
		}

		/// <summary>
		/// Syncronize the variable name in LED textboxes
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void checkBox1_CheckedChanged(object sender, EventArgs e) {
			TextBox[] ledTexts = { textBox14, textBox15, textBox16, textBox17, textBox18, textBox19, textBox20, textBox21, textBox22, textBox23 };
			for (int i = 1; i < ledTexts.Length; i++) {
				ledTexts[i].ReadOnly = checkBox1.Checked;
				ledTexts[i].ForeColor = checkBox1.Checked ? Color.Green : Color.Black;
				ledTexts[i].Text = checkBox1.Checked ? ledTexts[0].Text : ledTexts[i].Text;
			}
		}

		private void textBox14_TextChanged(object sender, EventArgs e) {
			if (checkBox1.Checked) {
				TextBox[] ledTexts = { textBox14, textBox15, textBox16, textBox17, textBox18, textBox19, textBox20, textBox21, textBox22, textBox23 };
				for (int i = 1; i < ledTexts.Length; i++) {
					ledTexts[i].Text = ledTexts[0].Text;
				}
			}
		}

		private void button1_Click(object sender, EventArgs e) {
			TextBox[] textBoxes = { textBox14, textBox15, textBox16, textBox17, textBox18, textBox19, textBox20, textBox21, textBox22, textBox23,
									textBox4, textBox5, textBox6, textBox7, textBox8, textBox9, textBox10, textBox11, textBox12, textBox13,
									textBox2, textBox3
			};
			// Clear LED, switch, button data
			for (int i = 0; i < textBoxes.Length; i++) {
				textBoxes[i].Text = "";
			}
			// Clear segment data
			for (int i = 0; i < segBtnData.Length; i++) {
				for (int j = 0; j < 8; j++) {
					segBtnData[i][j] = "";
				}
			}
			Button[] segBts = [segSetBtn1, segSetBtn2, segSetBtn3, segSetBtn4, segSetBtn5, segSetBtn6];
			foreach (Button btn in segBts) {
				btn.ForeColor = Color.Black;
				btn.BackColor = Color.Gainsboro;
			}
		}

		private void swchClearBtn_Click(object sender, EventArgs e) {
			TextBox[] swcTexts = { textBox4, textBox5, textBox6, textBox7, textBox8, textBox9, textBox10, textBox11, textBox12, textBox13 };
			for (int i = 0; i < swcTexts.Length; i++) {
				swcTexts[i].Text = "";
			}
		}

		private void ledPanel_MouseEnter(object sender, EventArgs e) {
			DescriptionHandler.displayLedHelp();
		}

		private void mouseOutRefreshDescription(object sender, EventArgs e) {
			DescriptionHandler.displayStartUpHelp();
		}

		private void switchesPanel_MouseEnter(object sender, EventArgs e) {
			DescriptionHandler.displaySwitchesHelp();
		}

		private void segsPanel_MouseEnter(object sender, EventArgs e) {
			DescriptionHandler.displaySegsHelp();
		}

		private void buttonPanel_MouseEnter(object sender, EventArgs e) {
			DescriptionHandler.displayButtonHelp();
		}
	}
}
